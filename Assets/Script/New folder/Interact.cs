//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Script/Interact.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InteractManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InteractManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Interact"",
    ""maps"": [
        {
            ""name"": ""Interact"",
            ""id"": ""a38b1084-4d1e-4654-9849-325491522eb7"",
            ""actions"": [
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""317bef1d-c391-4b67-8f08-716f20013411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Healing"",
                    ""type"": ""Button"",
                    ""id"": ""db4d9df1-5d57-4b18-ba47-d68d25293262"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon1"",
                    ""type"": ""Button"",
                    ""id"": ""01b2bb98-8578-4048-bdaa-475bb1638911"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon2"",
                    ""type"": ""Button"",
                    ""id"": ""dcf772a2-227b-444a-bd99-c3a25773b3b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon3"",
                    ""type"": ""Button"",
                    ""id"": ""8481e432-9d43-4a8e-a742-b2fb3d7337b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a94cfbe-99a3-4d95-8bea-094217291c57"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""707a4102-79da-4677-83f1-dc2f27692b15"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Healing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6901841a-2e71-4361-b453-023ff4dc1f6a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""348f4ec7-91cc-4b7a-b226-5c7c025160b4"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60ee0622-85a3-4ce0-b7b9-617a5f97ac75"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Reload = m_Interact.FindAction("Reload", throwIfNotFound: true);
        m_Interact_Healing = m_Interact.FindAction("Healing", throwIfNotFound: true);
        m_Interact_Weapon1 = m_Interact.FindAction("Weapon1", throwIfNotFound: true);
        m_Interact_Weapon2 = m_Interact.FindAction("Weapon2", throwIfNotFound: true);
        m_Interact_Weapon3 = m_Interact.FindAction("Weapon3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interact
    private readonly InputActionMap m_Interact;
    private IInteractActions m_InteractActionsCallbackInterface;
    private readonly InputAction m_Interact_Reload;
    private readonly InputAction m_Interact_Healing;
    private readonly InputAction m_Interact_Weapon1;
    private readonly InputAction m_Interact_Weapon2;
    private readonly InputAction m_Interact_Weapon3;
    public struct InteractActions
    {
        private @InteractManager m_Wrapper;
        public InteractActions(@InteractManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reload => m_Wrapper.m_Interact_Reload;
        public InputAction @Healing => m_Wrapper.m_Interact_Healing;
        public InputAction @Weapon1 => m_Wrapper.m_Interact_Weapon1;
        public InputAction @Weapon2 => m_Wrapper.m_Interact_Weapon2;
        public InputAction @Weapon3 => m_Wrapper.m_Interact_Weapon3;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void SetCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterface != null)
            {
                @Reload.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnReload;
                @Healing.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnHealing;
                @Healing.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnHealing;
                @Healing.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnHealing;
                @Weapon1.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon1;
                @Weapon1.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon1;
                @Weapon1.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon1;
                @Weapon2.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon2;
                @Weapon2.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon2;
                @Weapon2.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon2;
                @Weapon3.started -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon3;
                @Weapon3.performed -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon3;
                @Weapon3.canceled -= m_Wrapper.m_InteractActionsCallbackInterface.OnWeapon3;
            }
            m_Wrapper.m_InteractActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Healing.started += instance.OnHealing;
                @Healing.performed += instance.OnHealing;
                @Healing.canceled += instance.OnHealing;
                @Weapon1.started += instance.OnWeapon1;
                @Weapon1.performed += instance.OnWeapon1;
                @Weapon1.canceled += instance.OnWeapon1;
                @Weapon2.started += instance.OnWeapon2;
                @Weapon2.performed += instance.OnWeapon2;
                @Weapon2.canceled += instance.OnWeapon2;
                @Weapon3.started += instance.OnWeapon3;
                @Weapon3.performed += instance.OnWeapon3;
                @Weapon3.canceled += instance.OnWeapon3;
            }
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    public interface IInteractActions
    {
        void OnReload(InputAction.CallbackContext context);
        void OnHealing(InputAction.CallbackContext context);
        void OnWeapon1(InputAction.CallbackContext context);
        void OnWeapon2(InputAction.CallbackContext context);
        void OnWeapon3(InputAction.CallbackContext context);
    }
}
